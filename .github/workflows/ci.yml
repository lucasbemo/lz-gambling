name: Java CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Build and Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: ozamboni/lz-gambling
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  sonar:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonarqube
        ports:
          - 5432:5432
      sonarqube:
        image: sonarqube:lts-community
        env:
          SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        ports:
          - "9000:9000"

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Wait for SonarQube to be ready
        run: |
          until curl -sSf http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
            echo "Waiting for SonarQube to start..."
            sleep 10
          done
          echo "SonarQube is ready!"

      - name: Criar Token Admin do SonarQube
        run: |
          curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" \
            -d "name=admin_token" | jq -r '.token' > sonar_token.txt
          echo "SONAR_TOKEN=$(cat sonar_token.txt)" >> $GITHUB_ENV

      - name: Compilar e rodar testes
        run: mvn clean verify

      - name: Rodar análise com SonarQube
        run: |
          mvn sonar:sonar \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Salvar Relatórios como Artefatos
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: target/sonar

      - name: Parar SonarQube
        if: always()
        run: docker stop $(docker ps -q --filter ancestor=sonarqube:lts-community)

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Login Docker Hub
        run: sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        
      - name: verifica o login do docker
        run: sudo docker info
        
      - name: Pull na imagem
        run: sudo docker pull ozamboni/lz-gambling:main-231d4ec
        
      # - name: Run docker container
      #   run: sudo docker run -d -p 8080:8080 --name gambling ozamboni/lz-gambling:main-231d4ec
      - name: Run docker container
        run: sudo docker stop gambling || true && sudo docker rm gambling || true && sudo docker run -d -p 8080:8080 --name gambling ozamboni/lz-gambling:main-231d4ec
